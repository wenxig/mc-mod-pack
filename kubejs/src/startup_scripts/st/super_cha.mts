GTCEuStartupEvents.registry('gtceu:machine', event => {
  const r = event.create('kubejs_super_cha', 'multiblock') as any as Internal.MultiblockMachineBuilder
  r.rotationState(RotationState.NON_Y_AXIS)
  r.pattern(definition => FactoryBlockPattern.start()
    .aisle('AAAAAAA', 'BBBBBBB', 'BBBBBBB', 'BBBBBBB', 'BBBBBBB', 'BBBBBBB', 'CCCCCCC', 'DDDDDDD', 'DDDDDDD', 'DDDDDDD', 'DDDDDDD', 'CCCCCCC', 'BBBBBBB', 'BBBBBBB', 'BBBBBBB', 'BBBBBBB', 'BBBBBBB', 'AAAAAAA')
    .aisle('AAAAAAA', 'BEEBEEB', 'BEEBEEB', 'BEEBEEB', 'BEEBEEB', 'BEEBEEB', 'CFFCFFC', 'DGGHGGD', 'DGGHGGD', 'DGGHGGD', 'DGGHGGD', 'CFFCFFC', 'BEEBEEB', 'BEEBEEB', 'BEEBEEB', 'BEEBEEB', 'BEEBEEB', 'AAAAAAA')
    .aisle('AAAAAAA', 'BEEBEEB', 'BEEBEEB', 'BEEBEEB', 'BEEBEEB', 'BEEBEEB', 'CFECEFC', 'DGEHEGD', 'DGEHEGD', 'DGEHEGD', 'DGEHEGD', 'CFECEFC', 'BEEBEEB', 'BEEBEEB', 'BEEBEEB', 'BEEBEEB', 'BEEBEEB', 'AAAAAAA')
    .aisle('AAAAAAA', 'BBBBBBB', 'BBBBBBB', 'BBBBBBB', 'BBBBBBB', 'BBBBBBB', 'CCCCCCC', 'DHHHHHD', 'DHHHHHD', 'DHHHHHD', 'DHHHHHD', 'CCCCCCC', 'BBBBBBB', 'BBBBBBB', 'BBBBBBB', 'BBBBBBB', 'BBBBBBB', 'AAAAAAA')
    .aisle('AAAAAAA', 'BEEBEEB', 'BEEBEEB', 'BEEBEEB', 'BEEBEEB', 'BEEBEEB', 'CFECEFC', 'DGEHEGD', 'DGEHEGD', 'DGEHEGD', 'DGEHEGD', 'CFECEFC', 'BEEBEEB', 'BEEBEEB', 'BEEBEEB', 'BEEBEEB', 'BEEBEEB', 'AAAAAAA')
    .aisle('AAAAAAA', 'BEEBEEB', 'BEEBEEB', 'BEEBEEB', 'BEEBEEB', 'BEEBEEB', 'CFFCFFC', 'DGGHGGD', 'DGGHGGD', 'DGGHGGD', 'DGGHGGD', 'CFFCFFC', 'BEEBEEB', 'BEEBEEB', 'BEEBEEB', 'BEEBEEB', 'BEEBEEB', 'AAAAAAA')
    .aisle('AIIKIIA', 'BBBBBBB', 'BBBBBBB', 'BBBBBBB', 'BBBBBBB', 'BBBBBBB', 'CCCCCCC', 'DDDDDDD', 'DDDDDDD', 'DDDDDDD', 'DDDDDDD', 'CCCCCCC', 'BBBBBBB', 'BBBBBBB', 'BBBBBBB', 'BBBBBBB', 'BBBBBBB', 'AAAAAAA')
    .where('K', Predicates.controller(Predicates.blocks(definition.get())))
    .where('A', Predicates.blocks(GCYMBlocks.CASING_ATOMIC.get()))
    .where('B', Predicates.blocks(GTBlocks.CASING_PTFE_INERT.get()))
    .where('G', Predicates.blocks(GTBlocks.HERMETIC_CASING_UHV.get()))
    .where('C', Predicates.blocks(GTBlocks.COIL_TRITANIUM.get()))
    .where('D', Predicates.blocks(GTBlocks.CASING_LAMINATED_GLASS.get()))
    .where('I', Predicates.blocks(GTBlocks.MACHINE_CASING_UEV.get()))
    .where('H', Predicates.blocks('gtceu:steel_machine_casing'))
    .where('E', Predicates.blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
    .where('F', Predicates.blocks(GTBlocks.BATTERY_ULTIMATE_UHV.get()))
    .build()
  ).recipeTypes([GTRecipeTypes.CHEMICAL_RECIPES, GTRecipeTypes.LARGE_CHEMICAL_RECIPES, GTRecipeTypes.CHEMICAL_BATH_RECIPES, GTRecipeTypes.get('kubejs_super_cha')])
  r.langValue('block.gtceu.kubejs_super_cha')
})

GTCEuStartupEvents.registry('gtceu:recipe_type', e => {
  // create() 方法返回 com.gregtechceu.gtceu.integration.kjs.builders.GTRecipeTypeBuilder
  (e as any).create('kubejs_super_cha')
    .setEUIO('in')
    .setMaxIOSize(5, 5, 5, 5)
    .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
    .setSound(GTSoundEntries.COMPRESSOR)
})